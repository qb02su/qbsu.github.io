<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Go Module的使用</title>
      <link href="/2020/02/26/Go-Module%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/02/26/Go-Module%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Golang包管理器的学习</p><a id="more"></a><p>相较于过去的Go Path模式，Go Modules带来了以下特性：</p><ol><li>自动下载依赖包</li><li>项目不必放在GOPATH/src内了</li><li>项目内会生成一个go.mod文件，列出包依赖</li><li>所以来的第三方包会准确的指定版本号</li><li>对于已经转移的包，可以用replace 申明替换，不需要改代码</li></ol><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>首先在<code>GOPATH/src</code>以外的路径下新建一个项目文件，在该目录下命令行输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod init hello</span><br></pre></td></tr></table></figure><p>运行完后，会在当前项目目录下生成一个<strong>go.mod</strong> 文件，这是一个关键文件，之后的包的管理都是通过这个文件管理。</p><h2 id="依赖包的安装"><a href="#依赖包的安装" class="headerlink" title="依赖包的安装"></a>依赖包的安装</h2><p>如今， go 会自动查找代码中的包，下载依赖包，并且把具体的依赖关系和版本写入到go.mod和go.sum文件中。</p><p>依赖的第三方包被下载到了<code>$GOPATH/pkg/mod</code>路径下。</p><p>如果要想先下载依赖，那么可以直接像以前那样 <code>go get</code> 即可，不过 Go Mod 下可以跟语义化版本号，比如 <code>go get package@v1.2.3</code></p><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>版本是在go.mod中指定的。</p><p>如果，在go.mod中没有指定，go命令会自动下载代码中的依赖的最新版本。</p><p>如果，在go.mod用require语句指定包和版本 ，go命令会根据指定的路径和版本下载包，<br>指定版本时可以用<code>latest</code>，这样它会自动下载指定包的最新版本；</p><p><strong>依赖包的版本号是什么？</strong> 是包的发布者标记的版本号，格式为 vn.n.n (n代表数字)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go leetcode</title>
      <link href="/2020/02/18/go%20leetcode/"/>
      <url>/2020/02/18/go%20leetcode/</url>
      
        <content type="html"><![CDATA[<p>这里是用GO语言刷leetcode算法题的记录，会不定时更新</p><a id="more"></a><h2 id="1、两数之和"><a href="#1、两数之和" class="headerlink" title="1、两数之和"></a>1、两数之和</h2><h3 id="（1）暴力求解法"><a href="#（1）暴力求解法" class="headerlink" title="（1）暴力求解法"></a>（1）暴力求解法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">func twoSum(nums []int, target int) []int &#123;</span><br><span class="line">    res:&#x3D;make([]int,2,2)</span><br><span class="line">    flag:&#x3D;0</span><br><span class="line">    for i1,v1 :&#x3D;range(nums)&#123;</span><br><span class="line">        for i2,v2:&#x3D;range(nums)&#123;</span><br><span class="line">            if i1&#x3D;&#x3D;i2&#123;</span><br><span class="line">                continue</span><br><span class="line">            &#125;</span><br><span class="line">            if v1+v2&#x3D;&#x3D;target&#123;</span><br><span class="line">            res[0]&#x3D;i1</span><br><span class="line">            res[1]&#x3D;i2</span><br><span class="line">            flag&#x3D;1</span><br><span class="line">            break</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    if flag&#x3D;&#x3D;1&#123;</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度为o(n^2),效率很差</p><h3 id="（2）哈希表"><a href="#（2）哈希表" class="headerlink" title="（2）哈希表"></a>（2）哈希表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">func twoSum(nums []int, target int) []int &#123;</span><br><span class="line">    res:&#x3D;make([]int,2,2)</span><br><span class="line">    hash:&#x3D;make(map[int]int)</span><br><span class="line">    for i,v:&#x3D;range(nums)&#123;</span><br><span class="line">        tempt:&#x3D;target-v</span><br><span class="line">        _,ok:&#x3D;hash[tempt]</span><br><span class="line">        if(ok)&#123;</span><br><span class="line">            res[0]&#x3D;hash[tempt]</span><br><span class="line">            res[1]&#x3D;i</span><br><span class="line">            break</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            hash[v]&#x3D;i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用数据类型map，将value和key置换，只需要一次O(n) + O(1) 即可</p><h2 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9.回文数"></a>9.回文数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">func isPalindrome(x int) bool &#123;</span><br><span class="line">    var sum int&#x3D;0</span><br><span class="line">var y int &#x3D;x</span><br><span class="line">if x&lt;0&#123;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line">for x!&#x3D;0&#123;</span><br><span class="line">temp:&#x3D;x%10</span><br><span class="line">sum&#x3D;sum*10+temp</span><br><span class="line">x&#x3D;x&#x2F;10</span><br><span class="line">&#125;</span><br><span class="line">if sum&#x3D;&#x3D;y&#123;</span><br><span class="line">return true</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺着题意把数字倒过来就行了</p><h2 id="13-罗马数字转整数"><a href="#13-罗马数字转整数" class="headerlink" title="13.罗马数字转整数"></a>13.罗马数字转整数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">func romanToInt(s string) int &#123;</span><br><span class="line">   var sum int&#x3D;0  romanMap:&#x3D;map[string]int&#123;&quot;M&quot;:1000,&quot;CM&quot;:900,&quot;D&quot;:500,&quot;CD&quot;:400,&quot;C&quot;:100,&quot;XC&quot;:90,&quot;L&quot;:50,&quot;XL&quot;:40,&quot;X&quot;:10,&quot;IX&quot;:9,&quot;V&quot;:5,&quot;IV&quot;:4,&quot;I&quot;:1&#125;</span><br><span class="line">for i:&#x3D;0;i&lt;len(s);i++ &#123;</span><br><span class="line">if (i &lt; len(s)-1) &#123;</span><br><span class="line">_, ok :&#x3D; romanMap[s[i:i+2]]</span><br><span class="line">if ok &#123;</span><br><span class="line">sum +&#x3D; romanMap[s[i:i+2]]</span><br><span class="line">i++</span><br><span class="line">&#125; else &#123;</span><br><span class="line">sum +&#x3D; romanMap[string(s[i])]</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">sum +&#x3D; romanMap[string(s[i])]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切片范围是左闭右开给忘了-。-</p><h2 id="14-最长公共前缀"><a href="#14-最长公共前缀" class="headerlink" title="14.最长公共前缀"></a>14.最长公共前缀</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">func longestCommonPrefix(strs []string) string &#123;</span><br><span class="line">if len(strs) &#x3D;&#x3D; 0 &#123;</span><br><span class="line">return &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line">var result string</span><br><span class="line">if len(strs) &#x3D;&#x3D; 1 &#123;</span><br><span class="line">result &#x3D; strs[0]</span><br><span class="line">return result</span><br><span class="line">&#125;</span><br><span class="line">result &#x3D; strs[0]</span><br><span class="line">for i :&#x3D; 1; i &lt; len(strs); i++ &#123;</span><br><span class="line">if len(result)&gt;len(strs[i])&#123;</span><br><span class="line">result&#x3D;result[:len(strs[i])]</span><br><span class="line">&#125;</span><br><span class="line">for j:&#x3D;0;j&lt;len(result);j++&#123;</span><br><span class="line">if result[j]!&#x3D;strs[i][j]&#123;</span><br><span class="line">result&#x3D;result[:j]</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二维数组遍历下</p><h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20.有效的括号"></a>20.有效的括号</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">func isValid(s string) bool &#123;</span><br><span class="line">var stack []byte</span><br><span class="line">m:&#x3D;map[byte]byte&#123;</span><br><span class="line">&#39;)&#39;:&#39;(&#39;,</span><br><span class="line">&#39;]&#39;:&#39;[&#39;,</span><br><span class="line">&#39;&#125;&#39;:&#39;&#123;&#39;,</span><br><span class="line">&#125;</span><br><span class="line">for _,value:&#x3D;range s&#123;</span><br><span class="line">length:&#x3D;len(stack)</span><br><span class="line">if length&gt;0&#123;</span><br><span class="line">if _,ok:&#x3D;m[byte(value)];ok&#123;</span><br><span class="line">if stack[length-1]&#x3D;&#x3D;m[byte(value)]&#123;</span><br><span class="line">stack&#x3D;stack[:length-1]</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">stack&#x3D;append(stack,byte(value))</span><br><span class="line">&#125;</span><br><span class="line">return len(stack)&#x3D;&#x3D;0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21.合并两个有序链表"></a>21.合并两个有序链表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * type ListNode struct &#123;</span><br><span class="line"> *     Val int</span><br><span class="line"> *     Next *ListNode</span><br><span class="line"> * &#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode &#123;</span><br><span class="line">head:&#x3D;&amp;ListNode&#123;&#125;</span><br><span class="line">newlist:&#x3D;head</span><br><span class="line">for l1!&#x3D;nil||l2!&#x3D;nil&#123;</span><br><span class="line">if l1&#x3D;&#x3D;nil||(l2!&#x3D;nil&amp;&amp;l1.Val&gt;l2.Val)&#123;</span><br><span class="line">newlist.Next&#x3D;l2</span><br><span class="line">newlist&#x3D;l2</span><br><span class="line">l2&#x3D;l2.Next</span><br><span class="line">&#125;else&#123;</span><br><span class="line">newlist.Next&#x3D;l1</span><br><span class="line">newlist&#x3D;l1</span><br><span class="line">l1&#x3D;l1.Next</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return head.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="26-删除排序数组中的重复项"><a href="#26-删除排序数组中的重复项" class="headerlink" title="26. 删除排序数组中的重复项"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">26. 删除排序数组中的重复项</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">func removeDuplicates(nums []int) int &#123;</span><br><span class="line">if len(nums)&#x3D;&#x3D;0 &#123;</span><br><span class="line">return 0</span><br><span class="line">&#125;</span><br><span class="line">currValue :&#x3D; nums[0]</span><br><span class="line">count:&#x3D; 1</span><br><span class="line">for i:&#x3D;0;i&lt;len(nums);i++ &#123;</span><br><span class="line">if nums[i] !&#x3D; currValue &#123;</span><br><span class="line">count ++</span><br><span class="line">currValue &#x3D; nums[i]</span><br><span class="line">            nums[count-1]&#x3D;currValue</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><a href="https://leetcode-cn.com/problems/remove-element/" target="_blank" rel="noopener">27. 移除元素</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func removeElement(nums []int, val int) int &#123;</span><br><span class="line">count :&#x3D; 0</span><br><span class="line">for i:&#x3D;0;i&lt;len(nums);i++&#123;</span><br><span class="line">if nums[i]&#x3D;&#x3D;val&#123;</span><br><span class="line">continue</span><br><span class="line">&#125;else&#123;</span><br><span class="line">nums[count]&#x3D;nums[i]</span><br><span class="line">count++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="28-实现-strStr"><a href="#28-实现-strStr" class="headerlink" title="28. 实现 strStr()"></a><a href="https://leetcode-cn.com/problems/implement-strstr/" target="_blank" rel="noopener">28. 实现 strStr()</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">func getNext(s string) []int &#123;</span><br><span class="line">l :&#x3D; len(s)</span><br><span class="line">var next &#x3D; make([]int, l) &#x2F;&#x2F; 数组长度为模式串长度</span><br><span class="line">next[0] &#x3D; -1</span><br><span class="line">i :&#x3D; 0</span><br><span class="line">j :&#x3D; -1</span><br><span class="line">for i &lt; l-1 &#123;</span><br><span class="line">if j &#x3D;&#x3D; -1 || s[i] &#x3D;&#x3D; s[j] &#123;</span><br><span class="line">i +&#x3D; 1</span><br><span class="line">j +&#x3D; 1</span><br><span class="line">next[i] &#x3D; j</span><br><span class="line">&#125; else &#123;</span><br><span class="line">j &#x3D; next[j]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return next</span><br><span class="line">&#125;</span><br><span class="line">func strStr(haystack string, needle string) int &#123;</span><br><span class="line">lh :&#x3D; len(haystack)</span><br><span class="line">ln :&#x3D; len(needle)</span><br><span class="line">if ln &lt; 1 &#123;</span><br><span class="line">return 0</span><br><span class="line">&#125;</span><br><span class="line">if lh &lt; 1 &#123;</span><br><span class="line">return -1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i :&#x3D; 0</span><br><span class="line">j :&#x3D; 0</span><br><span class="line">next :&#x3D; getNext(needle) &#x2F;&#x2F; 构造next数组</span><br><span class="line">for i &lt; lh &amp;&amp; j &lt; ln &#123;</span><br><span class="line">if j &#x3D;&#x3D; -1 || haystack[i] &#x3D;&#x3D; needle[j] &#123;</span><br><span class="line">i++</span><br><span class="line">j++</span><br><span class="line">&#125; else &#123;</span><br><span class="line">j &#x3D; next[j] &#x2F;&#x2F; 不匹配则则移动next[j]位</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if j &#x3D;&#x3D; ln &#123;</span><br><span class="line">return i - j</span><br><span class="line">&#125;</span><br><span class="line">return -1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>KMP算法</p><h2 id="167-两数之和-II-输入有序数组"><a href="#167-两数之和-II-输入有序数组" class="headerlink" title="167. 两数之和 II - 输入有序数组"></a><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="noopener">167. 两数之和 II - 输入有序数组</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">func twoSum(numbers []int, target int) []int &#123;</span><br><span class="line">i:&#x3D;0;</span><br><span class="line">j:&#x3D;len(numbers)-1</span><br><span class="line">result:&#x3D;make([]int,2,2)</span><br><span class="line">for i&lt;j&#123;</span><br><span class="line">sum:&#x3D;numbers[i]+numbers[j]</span><br><span class="line">if sum&lt;target&#123;</span><br><span class="line">i++</span><br><span class="line">&#125;else if sum&gt;target&#123;</span><br><span class="line">j--</span><br><span class="line">&#125;else&#123;</span><br><span class="line">result[0]&#x3D;i+1</span><br><span class="line">result[1]&#x3D;j+1</span><br><span class="line">return result</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="633-平方数之和"><a href="#633-平方数之和" class="headerlink" title="633. 平方数之和"></a><a href="https://leetcode-cn.com/problems/sum-of-square-numbers/" target="_blank" rel="noopener">633. 平方数之和</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">func judgeSquareSum(c int) bool &#123;</span><br><span class="line">i:&#x3D;0</span><br><span class="line">j:&#x3D;int(math.Sqrt(float64(c)))</span><br><span class="line">for i&lt;&#x3D;j&#123;</span><br><span class="line">sum:&#x3D;i*i+j*j</span><br><span class="line">if sum&gt;c&#123;</span><br><span class="line">j--</span><br><span class="line">&#125;else if sum&lt;c&#123;</span><br><span class="line">i++</span><br><span class="line">&#125;else &#123;</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="345-反转字符串中的元音字母"><a href="#345-反转字符串中的元音字母" class="headerlink" title="345. 反转字符串中的元音字母"></a><a href="https://leetcode-cn.com/problems/reverse-vowels-of-a-string/" target="_blank" rel="noopener">345. 反转字符串中的元音字母</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">func reverseVowels(s string) string &#123;</span><br><span class="line">   ss :&#x3D; []byte(s)</span><br><span class="line">   tmp1 :&#x3D; &quot;aeiouAEIOU&quot;</span><br><span class="line">   i :&#x3D; 0</span><br><span class="line">   j :&#x3D; len(s) - 1</span><br><span class="line">   for i &lt; j &#123;</span><br><span class="line">      if strings.Contains(tmp1, string(ss[i])) &#123;</span><br><span class="line">         if strings.Contains(tmp1, string(ss[j])) &#123;</span><br><span class="line">            ss[i], ss[j] &#x3D; ss[j], ss[i]</span><br><span class="line">            i++</span><br><span class="line">         &#125;</span><br><span class="line">         j--</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">         i++</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   return string(ss)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">141. 环形链表</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">func hasCycle(head *ListNode) bool &#123;</span><br><span class="line">    if head&#x3D;&#x3D;nil&#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">    head1:&#x3D;head</span><br><span class="line">    head2:&#x3D;head.Next</span><br><span class="line">    for head1!&#x3D;nil&amp;&amp;head2!&#x3D;nil&amp;&amp;head2.Next!&#x3D;nil&#123;</span><br><span class="line">        if head1.Next&#x3D;&#x3D;head2.Next&#123;</span><br><span class="line">            return true</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            head1&#x3D;head1.Next</span><br><span class="line">            head2&#x3D;head2.Next.Next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
